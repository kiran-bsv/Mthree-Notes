{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DashboardComponent = class DashboardComponent {\n  metricsService;\n  alertsService;\n  apiService;\n  metrics$;\n  alerts$;\n  currentSeverityFilter = '';\n  isTestRunning = false;\n  // Simulation controls\n  cpuTestDuration = 5;\n  memoryTestSize = 10;\n  memoryTestDuration = 5;\n  errorType = 'client';\n  constructor(metricsService, alertsService, apiService) {\n    this.metricsService = metricsService;\n    this.alertsService = alertsService;\n    this.apiService = apiService;\n    this.metrics$ = this.metricsService.metrics$;\n    this.alerts$ = this.alertsService.alerts$;\n  }\n  ngOnInit() {\n    // Initial data fetch\n    this.refreshMetrics();\n    this.alertsService.refreshAlerts();\n  }\n  refreshMetrics() {\n    this.metricsService.refreshMetrics();\n  }\n  filterAlerts(severity) {\n    this.currentSeverityFilter = severity;\n    this.alertsService.refreshAlerts(severity);\n  }\n  acknowledgeAlert(alertId) {\n    this.alertsService.acknowledgeAlert(alertId);\n  }\n  openSettings() {\n    // In a real app, this would open a settings dialog\n    alert('Settings functionality would go here');\n  }\n  simulateCpuLoad() {\n    this.isTestRunning = true;\n    this.apiService.simulateCpuLoad(this.cpuTestDuration).subscribe({\n      next: response => {\n        console.log('CPU test response:', response);\n        this.isTestRunning = false;\n        // Refresh metrics after test\n        setTimeout(() => this.refreshMetrics(), 1000);\n      },\n      error: error => {\n        console.error('CPU test error:', error);\n        this.isTestRunning = false;\n      }\n    });\n  }\n  simulateMemoryLoad() {\n    this.isTestRunning = true;\n    this.apiService.simulateMemoryLoad(this.memoryTestSize, this.memoryTestDuration).subscribe({\n      next: response => {\n        console.log('Memory test response:', response);\n        this.isTestRunning = false;\n        // Refresh metrics after test\n        setTimeout(() => this.refreshMetrics(), 1000);\n      },\n      error: error => {\n        console.error('Memory test error:', error);\n        this.isTestRunning = false;\n      }\n    });\n  }\n  simulateError() {\n    this.isTestRunning = true;\n    this.apiService.simulateError(this.errorType).subscribe({\n      next: response => {\n        // This shouldn't happen\n        console.log('Error simulation response:', response);\n        this.isTestRunning = false;\n      },\n      error: error => {\n        console.log('Error simulated successfully:', error);\n        this.isTestRunning = false;\n        // Refresh alerts after error\n        setTimeout(() => this.alertsService.refreshAlerts(), 1000);\n      }\n    });\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  template: `\n    <div class=\"dashboard-container\">\n      <header class=\"dashboard-header\">\n        <h1>SRE Dashboard</h1>\n        <div class=\"actions\">\n          <button (click)=\"refreshMetrics()\">Refresh Metrics</button>\n          <button (click)=\"openSettings()\">Settings</button>\n        </div>\n      </header>\n\n      <div class=\"dashboard-content\">\n        <div class=\"metrics-section\">\n          <h2>System Metrics</h2>\n          <div class=\"metrics-grid\">\n            <app-metric-card\n              title=\"CPU Usage\"\n              [value]=\"(metrics$ | async)?.cpu_usage || 0\"\n              unit=\"%\"\n              [thresholdWarning]=\"70\"\n              [thresholdCritical]=\"90\"\n            ></app-metric-card>\n            \n            <app-metric-card\n              title=\"Memory Usage\"\n              [value]=\"(metrics$ | async)?.memory_usage || 0\"\n              unit=\"%\"\n              [thresholdWarning]=\"80\"\n              [thresholdCritical]=\"95\"\n            ></app-metric-card>\n            \n            <app-metric-card\n              title=\"Disk Usage\"\n              [value]=\"(metrics$ | async)?.disk_usage || 0\"\n              unit=\"%\"\n              [thresholdWarning]=\"75\"\n              [thresholdCritical]=\"90\"\n            ></app-metric-card>\n            \n            <app-metric-card\n              title=\"Network Sent\"\n              [value]=\"((metrics$ | async)?.network_io?.sent_bytes || 0) / (1024 * 1024)\"\n              unit=\"MB\"\n            ></app-metric-card>\n            \n            <app-metric-card\n              title=\"Network Received\"\n              [value]=\"((metrics$ | async)?.network_io?.received_bytes || 0) / (1024 * 1024)\"\n              unit=\"MB\"\n            ></app-metric-card>\n          </div>\n        </div>\n\n        <div class=\"alerts-section\">\n          <h2>Recent Alerts</h2>\n          <div class=\"alerts-filter\">\n            <button \n              [ngClass]=\"{'active': currentSeverityFilter === ''}\"\n              (click)=\"filterAlerts('')\">All</button>\n            <button \n              [ngClass]=\"{'active': currentSeverityFilter === 'critical'}\"\n              (click)=\"filterAlerts('critical')\">Critical</button>\n            <button \n              [ngClass]=\"{'active': currentSeverityFilter === 'warning'}\"\n              (click)=\"filterAlerts('warning')\">Warning</button>\n            <button \n              [ngClass]=\"{'active': currentSeverityFilter === 'info'}\"\n              (click)=\"filterAlerts('info')\">Info</button>\n          </div>\n          <app-alert-list\n            [alerts]=\"alerts$ | async ?? []\"\n            (acknowledge)=\"acknowledgeAlert($event)\"\n          ></app-alert-list>\n        </div>\n\n        <div class=\"simulation-section\">\n          <h2>Test Utilities</h2>\n          <div class=\"simulation-grid\">\n            <div class=\"simulation-card\">\n              <h3>CPU Load Test</h3>\n              <div class=\"form-group\">\n                <label for=\"cpu-duration\">Duration (seconds):</label>\n                <input id=\"cpu-duration\" type=\"number\" [(ngModel)]=\"cpuTestDuration\" min=\"1\" max=\"30\">\n              </div>\n              <button [disabled]=\"isTestRunning\" (click)=\"simulateCpuLoad()\">Run Test</button>\n            </div>\n            \n            <div class=\"simulation-card\">\n              <h3>Memory Load Test</h3>\n              <div class=\"form-group\">\n                <label for=\"memory-size\">Size (MB):</label>\n                <input id=\"memory-size\" type=\"number\" [(ngModel)]=\"memoryTestSize\" min=\"1\" max=\"100\">\n              </div>\n              <div class=\"form-group\">\n                <label for=\"memory-duration\">Duration (seconds):</label>\n                <input id=\"memory-duration\" type=\"number\" [(ngModel)]=\"memoryTestDuration\" min=\"1\" max=\"30\">\n              </div>\n              <button [disabled]=\"isTestRunning\" (click)=\"simulateMemoryLoad()\">Run Test</button>\n            </div>\n            \n            <div class=\"simulation-card\">\n              <h3>Error Simulation</h3>\n              <div class=\"form-group\">\n                <label for=\"error-type\">Error Type:</label>\n                <select id=\"error-type\" [(ngModel)]=\"errorType\">\n                  <option value=\"client\">Client Error (400)</option>\n                  <option value=\"server\">Server Error (500)</option>\n                </select>\n              </div>\n              <button [disabled]=\"isTestRunning\" (click)=\"simulateError()\">Simulate Error</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .dashboard-container {\n      padding: 16px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    .dashboard-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 24px;\n    }\n    .dashboard-header h1 {\n      margin: 0;\n    }\n    .actions button {\n      margin-left: 8px;\n      padding: 8px 16px;\n      background-color: #2196f3;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .metrics-section, .alerts-section, .simulation-section {\n      margin-bottom: 32px;\n    }\n    .metrics-section h2, .alerts-section h2, .simulation-section h2 {\n      margin-top: 0;\n      margin-bottom: 16px;\n      font-size: 20px;\n    }\n    .metrics-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n      gap: 16px;\n    }\n    .alerts-filter {\n      margin-bottom: 16px;\n    }\n    .alerts-filter button {\n      margin-right: 8px;\n      padding: 4px 12px;\n      background-color: #f0f0f0;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .alerts-filter button.active {\n      background-color: #2196f3;\n      color: white;\n      border-color: #2196f3;\n    }\n    .simulation-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n      gap: 16px;\n    }\n    .simulation-card {\n      padding: 16px;\n      background-color: #f9f9f9;\n      border-radius: 8px;\n      border: 1px solid #eee;\n    }\n    .simulation-card h3 {\n      margin-top: 0;\n      margin-bottom: 16px;\n      font-size: 16px;\n    }\n    .form-group {\n      margin-bottom: 12px;\n    }\n    .form-group label {\n      display: block;\n      margin-bottom: 4px;\n      font-size: 14px;\n    }\n    .form-group input, .form-group select {\n      width: 100%;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n    .simulation-card button {\n      width: 100%;\n      padding: 8px 16px;\n      background-color: #4caf50;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .simulation-card button:disabled {\n      background-color: #ccc;\n      cursor: not-allowed;\n    }\n  `]\n})], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}