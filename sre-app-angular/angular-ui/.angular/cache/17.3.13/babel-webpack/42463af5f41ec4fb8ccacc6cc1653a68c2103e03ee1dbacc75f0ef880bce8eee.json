{"ast":null,"code":"import { BehaviorSubject, interval } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nexport class AlertsService {\n  apiService;\n  alertsSubject = new BehaviorSubject([]);\n  refreshInterval = 30000; // 30 seconds\n  alerts$ = this.alertsSubject.asObservable();\n  constructor(apiService) {\n    this.apiService = apiService;\n    // Set up automatic polling for alerts\n    this.setupAlertsPolling();\n  }\n  setupAlertsPolling() {\n    interval(this.refreshInterval).pipe(switchMap(() => this.apiService.getAlerts())).subscribe({\n      next: alerts => this.alertsSubject.next(alerts ?? []),\n      error: error => console.error('Error fetching alerts:', error)\n    });\n    // Initial fetch\n    this.refreshAlerts();\n  }\n  refreshAlerts(severity) {\n    this.apiService.getAlerts(severity).subscribe({\n      next: alerts => this.alertsSubject.next(alerts),\n      error: error => console.error('Error fetching alerts:', error)\n    });\n  }\n  acknowledgeAlert(alertId) {\n    const currentAlerts = this.alertsSubject.getValue();\n    const updatedAlerts = currentAlerts.map(alert => alert.id === alertId ? {\n      ...alert,\n      acknowledged: true\n    } : alert);\n    this.alertsSubject.next(updatedAlerts);\n    // In a real app, you would call an API endpoint to persist this change\n    // this.apiService.acknowledgeAlert(alertId).subscribe();\n  }\n  static ɵfac = function AlertsService_Factory(t) {\n    return new (t || AlertsService)(i0.ɵɵinject(i1.ApiService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertsService,\n    factory: AlertsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","interval","switchMap","AlertsService","apiService","alertsSubject","refreshInterval","alerts$","asObservable","constructor","setupAlertsPolling","pipe","getAlerts","subscribe","next","alerts","error","console","refreshAlerts","severity","acknowledgeAlert","alertId","currentAlerts","getValue","updatedAlerts","map","alert","id","acknowledged","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["/home/kiran/Desktop/Mthree-Notes/sre-app-angular/angular-ui/src/app/core/services/alerts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { BehaviorSubject, Observable, interval } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Alert } from '../models/alert.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertsService {\n  private alertsSubject = new BehaviorSubject<Alert[]>([]);\n  private refreshInterval = 30000; // 30 seconds\n  \n  alerts$ = this.alertsSubject.asObservable();\n  \n  constructor(private apiService: ApiService) {\n    // Set up automatic polling for alerts\n    this.setupAlertsPolling();\n  }\n  \n  private setupAlertsPolling(): void {\n    interval(this.refreshInterval)\n      .pipe(\n        switchMap(() => this.apiService.getAlerts())\n      )\n      .subscribe({\n        next: (alerts) => this.alertsSubject.next(alerts ?? []),\n        error: (error) => console.error('Error fetching alerts:', error)\n      });\n      \n    // Initial fetch\n    this.refreshAlerts();\n  }\n  \n  refreshAlerts(severity?: string): void {\n    this.apiService.getAlerts(severity).subscribe({\n      next: (alerts) => this.alertsSubject.next(alerts),\n      error: (error) => console.error('Error fetching alerts:', error)\n    });\n  }\n  \n  acknowledgeAlert(alertId: number): void {\n    const currentAlerts = this.alertsSubject.getValue();\n    const updatedAlerts = currentAlerts.map(alert => \n      alert.id === alertId ? { ...alert, acknowledged: true } : alert\n    );\n    this.alertsSubject.next(updatedAlerts);\n    \n    // In a real app, you would call an API endpoint to persist this change\n    // this.apiService.acknowledgeAlert(alertId).subscribe();\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,QAAQ,QAAQ,MAAM;AAC5D,SAASC,SAAS,QAAQ,gBAAgB;;;AAM1C,OAAM,MAAOC,aAAa;EAMJC,UAAA;EALZC,aAAa,GAAG,IAAIL,eAAe,CAAU,EAAE,CAAC;EAChDM,eAAe,GAAG,KAAK,CAAC,CAAC;EAEjCC,OAAO,GAAG,IAAI,CAACF,aAAa,CAACG,YAAY,EAAE;EAE3CC,YAAoBL,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAC5B;IACA,IAAI,CAACM,kBAAkB,EAAE;EAC3B;EAEQA,kBAAkBA,CAAA;IACxBT,QAAQ,CAAC,IAAI,CAACK,eAAe,CAAC,CAC3BK,IAAI,CACHT,SAAS,CAAC,MAAM,IAAI,CAACE,UAAU,CAACQ,SAAS,EAAE,CAAC,CAC7C,CACAC,SAAS,CAAC;MACTC,IAAI,EAAGC,MAAM,IAAK,IAAI,CAACV,aAAa,CAACS,IAAI,CAACC,MAAM,IAAI,EAAE,CAAC;MACvDC,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK;KAChE,CAAC;IAEJ;IACA,IAAI,CAACE,aAAa,EAAE;EACtB;EAEAA,aAAaA,CAACC,QAAiB;IAC7B,IAAI,CAACf,UAAU,CAACQ,SAAS,CAACO,QAAQ,CAAC,CAACN,SAAS,CAAC;MAC5CC,IAAI,EAAGC,MAAM,IAAK,IAAI,CAACV,aAAa,CAACS,IAAI,CAACC,MAAM,CAAC;MACjDC,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK;KAChE,CAAC;EACJ;EAEAI,gBAAgBA,CAACC,OAAe;IAC9B,MAAMC,aAAa,GAAG,IAAI,CAACjB,aAAa,CAACkB,QAAQ,EAAE;IACnD,MAAMC,aAAa,GAAGF,aAAa,CAACG,GAAG,CAACC,KAAK,IAC3CA,KAAK,CAACC,EAAE,KAAKN,OAAO,GAAG;MAAE,GAAGK,KAAK;MAAEE,YAAY,EAAE;IAAI,CAAE,GAAGF,KAAK,CAChE;IACD,IAAI,CAACrB,aAAa,CAACS,IAAI,CAACU,aAAa,CAAC;IAEtC;IACA;EACF;;qBAzCWrB,aAAa,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAb7B,aAAa;IAAA8B,OAAA,EAAb9B,aAAa,CAAA+B,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}