{"ast":null,"code":"import { BehaviorSubject, interval } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nexport let MetricsService = /*#__PURE__*/(() => {\n  class MetricsService {\n    apiService;\n    metricsSubject = new BehaviorSubject(null);\n    refreshInterval = 10000; // 10 seconds\n    metrics$ = this.metricsSubject.asObservable();\n    constructor(apiService) {\n      this.apiService = apiService;\n      // Set up automatic polling for metrics\n      this.setupMetricsPolling();\n    }\n    setupMetricsPolling() {\n      interval(this.refreshInterval).pipe(switchMap(() => this.apiService.getMetrics())).subscribe({\n        next: metrics => this.metricsSubject.next(metrics),\n        error: error => console.error('Error fetching metrics:', error)\n      });\n      // Initial fetch\n      this.refreshMetrics();\n    }\n    refreshMetrics() {\n      this.apiService.getMetrics().subscribe({\n        next: metrics => this.metricsSubject.next(metrics),\n        error: error => console.error('Error fetching metrics:', error)\n      });\n    }\n    setRefreshInterval(intervalMs) {\n      this.refreshInterval = intervalMs;\n      this.setupMetricsPolling();\n    }\n    static ɵfac = function MetricsService_Factory(t) {\n      return new (t || MetricsService)(i0.ɵɵinject(i1.ApiService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MetricsService,\n      factory: MetricsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MetricsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}