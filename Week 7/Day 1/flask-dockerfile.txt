# Dockerfile for Flask API
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY app.py .

EXPOSE 5000

CMD ["python", "app.py"]

# Create a requirements.txt file
# contents below should be saved in requirements.txt
# ---
# flask==2.3.2
# flask-cors==4.0.0
# prometheus-client==0.17.1
# gunicorn==21.2.0
# ---

# Kubernetes deployment file
# contents below should be saved as flask-api-deployment.yaml
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: flask-api
#   namespace: sre-monitoring
#   labels:
#     app: flask-api
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: flask-api
#   template:
#     metadata:
#       labels:
#         app: flask-api
#       annotations:
#         prometheus.io/scrape: "true"
#         prometheus.io/port: "5000"
#         prometheus.io/path: "/metrics"
#     spec:
#       containers:
#       - name: flask-api
#         image: flask-api:latest
#         imagePullPolicy: IfNotPresent
#         ports:
#         - containerPort: 5000
#         env:
#         - name: ENVIRONMENT
#           value: "production"
#         - name: LOG_LEVEL
#           value: "INFO"
#         resources:
#           requests:
#             cpu: 100m
#             memory: 128Mi
#           limits:
#             cpu: 200m
#             memory: 256Mi
#         readinessProbe:
#           httpGet:
#             path: /api/health
#             port: 5000
#           initialDelaySeconds: 5
#           periodSeconds: 10
#         livenessProbe:
#           httpGet:
#             path: /api/health
#             port: 5000
#           initialDelaySeconds: 15
#           periodSeconds: 20
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: flask-api-service
#   namespace: sre-monitoring
# spec:
#   selector:
#     app: flask-api
#   ports:
#   - port: 5000
#     targetPort: 5000
#   type: ClusterIP
# ---
